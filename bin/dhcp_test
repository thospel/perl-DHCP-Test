#!/usr/bin/perl -w
# RFC2131: DHCP
# RFC2132: Options
use strict;
use warnings;

=begin comment
On 10.253.0.8

# Set up FOU tunnel. Notice that we listen on the output port of the tunnel
modprobe fou
ip link add name fou1 type ipip remote 127.0.0.1 local 127.0.0.1 ttl 225 encap fou encap-sport auto encap-dport 1236
# ip addr add 10.253.4.1/24 dev fou1
ip link set fou1 up
# Decapsulator
ip fou add port 1237 ipproto 4 local 127.0.0.1

# Allow these weird outgoing FOU packets
sysctl -w net.ipv4.conf.all.rp_filter=0
sysctl -w net.ipv4.conf.fou1.rp_filter=0

# Match DHCP replies about MAC address BA:D1:XX:XX:XX:XX
# (See http://www.stearns.org/doc/iptables-u32.current.html)
# Leave operational DHCP replies alone
iptables -t mangle -A OUTPUT -p udp --sport 67 --dport 67 -m u32 --u32 "4&0x1FFF=0 && 0>>22&0x3C@34&0xffff=0xbad1 && 0>>22&0x3C@5&0xff=0x02" -j MARK --set-mark 17

# Make marked packets use routing plane 101
ip rule add fwmark 17 lookup 101

# Route everything in routing plane 101 to the FOU tunnel:
ip route add default dev fou1 table 101

# Experiments with -t nat failed because this implicitely uses tracked
# connections and all these port 67 to port 67 packets fall into the same
# connection. And since the nat is only done on the first packet for the tracked
# connection it means that effectively the the MAC match gets ignored

# Now this works (on 10.253.0.8):
dhcp_test -v -g 10.254.0.14  -s 0.0.0.1 -l 1236 -r 0 -e 10.253.0.8 -m BA:D1 --fou 1237
# Notice that -s <local address> like 0.0.0.0, 255.255.255.255, 10.235.0.8 etc
# all fail. The reason is unclear. The DHCPDISCOVER packet is generated (you
# can tcpdump it on interface fou1, and strace shows that the DHCP server
# receives it, but it gets ignored. It seems that any visible IP address fails
# you must use something that isn't assigned to any host for -s to work.
# This needs to be traced in the dhcp executable to understand this

# Experiments with tc filter nat also failed. It works for a specific -g target
# but I seem to be unable to map a range of destination addresses to a single
# destination address. I always get a mask of /32 however I add the filter
# Either I do something wrong or its a bug or what I want is impossible:
#
# iptables -t mangle -A OUTPUT -p udp --dport 67 --sport 67 -m u32 --u32 "4&0x1FFF=0 && 0>>22&0x3C@34&0xffff=0xbad1 && 0>>22&0x3C@5&0xff=0x02" -j MARK --set-mark 18
# tc qdisc del add eno1 root handle 1 htb
# tc filter add dev eno1 parent 1: protocol ip prio 8 handle 18 fw action nat ingress any 10.253.0.14/16
# tc filter show dev eno1

# nftables should be abnle to do static NAT, but my system is currently iptables

=end comment

=cut

our $VERSION = "1.000";

use FindBin qw($Script);
our $Bin;

# If the program runs as /foobar/bin/program, find libraries in /foobar/lib
BEGIN {
    # Even on windows FindBin uses / in the reported path
    $Bin = $FindBin::Bin;
    $Bin =~ s{/+\z}{};
    $Bin =~
        ($^O eq "MSWin32" ?
         qr{^((?:[A-Z]:)?(?:/[a-zA-Z0-9_:.~ -]+)*)/[a-zA-Z0-9_.-]+/*\z} :
         qr{^((?:/[a-zA-Z0-9_:.-]+)*)/[a-zA-Z0-9_.-]+/*\z}) ||
         die "Could not parse bin directory '$Bin'";
    # Use untainted version of lib
    require lib;
    # Support a simple --blib option for pre-install testing
    "lib"->import(@ARGV && $ARGV[0] eq "--blib" ? shift && "$1/blib/lib" : "$1/lib");
}

use Getopt::Long 2.24 qw(:config bundling require_order);
use Socket
    qw(pack_sockaddr_in unpack_sockaddr_in inet_aton inet_ntoa
       PF_INET SOCK_DGRAM SO_REUSEADDR INADDR_ANY INADDR_BROADCAST IPPROTO_IP);
use Errno qw(EADDRINUSE);
use Sys::Hostname qw(hostname);

use DHCP::Test qw($verbose $separator
                  SO_BINDTODEVICE PROTO_UDP BOOTPC BOOTPS
                  DISCOVER OFFER REQUEST ACK RELEASE INFORM
                  OPTION_HOSTNAME OPTION_REQUEST_IP OPTION_SERVER
                  AGENT_CIRCUIT_ID AGENT_REMOTE_ID
                  parse_udp_address packet_send packet_receive message_type
                  string_from_value);
use DHCP::Test::Package;
use Time::HiRes qw(time sleep);

$| = 1;

my ($nagios, $result);
$verbose = 0;
eval {
    # Client chosen ID to match answers
    # my $xid = "41.42.43.44";
    my $xid = ($$ % 2**16) << 16 | int(rand 2**15) << 1;
    my $hostname_local = hostname();
    $hostname_local =~ s/\..*//sg;
    my $listen_timeout = 5;
    my $timeout = 1.5;
    my $retries = 2;

    die "Could not parse your command line. Try $0 -h\n" unless
        GetOptions("v|verbose+"	=> \$verbose,
                   "xid=s"		=> \$xid,
                   "r|retries=o"	=> \$retries,
                   "t|timeout=f"	=> \$timeout,
                   "i|interface=s"	=> \my $interface,
                   "I|ip=s"		=> \my $request_ip,
                   "m|mac:s"		=> \my $mac,
                   "ttl=o"		=> \my $ttl,
                   "H|hostname:s"	=> \my $hostname,
                   "l|listen=s"		=> \my $listen,
                   "L|listen_timeout=f"	=> \$listen_timeout,
                   # do DHCP relay request. Answer is on port 67. Not supported yet
                   "g|gateway:s"	=> \my $gateway_ip,
                   "circuit_id=s"	=> \my $cid,
                   "remote_id=s"	=> \my $rid,
                   "u|unicast!"		=> \my $unicast,
                   "b|broadcast!"	=> \my $broadcast,
                   "T|track!"		=> \my $track,
                   "f|from=s"		=> \my $send_from,
                   # Do not broadcast but send to specific DHCP server
                   "s|server=s"		=> \my $server_ip,
                   # Only accept answer from specific DHCP server
                   "e|expect_ip=s"	=> \my @expect_ip,
                   "E|expect_id=s"	=> \my @expect_id,
                   "R|request!"		=> \my $request,
                   "k|keep!"		=> \my $keep,
                   "inform!"		=> \my $inform,
                   "N|nagios!"		=> \$nagios,
                   "fou=s"		=> \my $fou,
                   "version!"		=> \my $version,
                   "U|unsafe!"		=> \my $unsafe,
                   "h|help!"		=> \my $help);

    if ($version) {
        ## no critic (UselessNoCritic RequireCheckedSyscalls)
        print <<"EOF";
dhcp_test $VERSION (DHCP::Test $DHCP::Test::Package::VERSION)
EOF
        exit 0;
    }
    if ($help) {
        require Config;
        $ENV{PATH} .= ":" unless $ENV{PATH} eq "";
        $ENV{PATH} = "$ENV{PATH}$Config::Config{'installscript'}";
        exit system("perldoc", "-F", $unsafe ? "-U" : (), "$Bin/$Script") ? 1 : 0;
        # make parser happy
        %Config::Config = ();
    }

    ++$verbose if !$nagios && $verbose;
    $request //= -1;
    $hostname = $hostname_local if defined $hostname && $hostname eq "";
    my (%expect_ip, %expect_id);
    $expect_ip{parse_udp_address($_, "expect", undef, BOOTPS, 1)} = 1
        for @expect_ip;
    $expect_id{inet_aton($_) // die "Could not resolve expect_id '$_'\n"} = 1
        for @expect_id;
    $request_ip = inet_ntoa(
        inet_aton($request_ip) ||
        die("Could not resolve request IP '$request_ip'\n")) if
            defined $request_ip;
    !defined $ttl || 0 < $ttl && $ttl < 256 || die "Invalid TTL '$ttl'\n";
    $xid = unpack("N", inet_aton($xid) // die "Could not resolve xid '$xid'");
    if (defined $mac) {
        $mac =~ /^[0-9A-FX:. ]*\z/i || die "Invalid MAC '$mac'\n";
        $mac =~ s{([0-9A-FX]+)}{length($1) % 2 ? "0$1" : $1}eig;
        $mac =~ tr/a-fx:. /A-FX/d;
        length $mac == 12 || die "Invalid MAC length";
        if (my $x = $mac =~ tr/X//) {
            my $now = time();
            my $replace = substr(sprintf("%02X%04X%04X%02X",
                                         rand(2**8),
                                         $now & 0xffff,
                                         rand(2**16),
                                         $$ & 0xff), -$x);
            $mac =~ s{X}{die "Assertion: out of replace bytes" if $replace eq "";
                         substr($replace, 0, 1, "")}eg;
        }
        $mac = pack("H*", $mac);
    }
    $broadcast = 1 if !defined $broadcast && !$server_ip;
    my $server_packed = parse_udp_address($server_ip || "255.255.255.255", "server ip", "255.255.255.255", BOOTPS, 1);
    $send_from = parse_udp_address($send_from, "send from", undef, 0, 1) if defined $send_from;
    $fou = parse_udp_address($fou, "fou receiver", "127.0.0.1") if defined $fou;
    my %agent_info = (
        defined $cid ? (AGENT_CIRCUIT_ID() => $cid) : (),
        defined $rid ? (AGENT_REMOTE_ID () => $rid) : (),
    );

    socket(my $recv, PF_INET, SOCK_DGRAM, PROTO_UDP) ||
        die "Could not create socket: $^E";
    #setsockopt($recv, SOL_SOCKET, SO_BROADCAST, 1) ||
    #    die "Could not setsockopt SO_BROADCAST: $^E";
    # setsockopt($recv, SOL_SOCKET, SO_REUSEADDR, 1) ||
    #    die "Could not setsockopt SO_REUSEADDR: $^E";
    my $from = parse_udp_address(
        $listen // "",
        "listen address",
        "0.0.0.0",
        defined $gateway_ip ? BOOTPS : BOOTPC);
    my $start = time();
    my $n = 0;
    while (!bind($recv, $from)) {
        my ($port, $addr) = unpack_sockaddr_in($from);
        my $ip = inet_ntoa($addr);
        $! == EADDRINUSE || die "Could not bind to $ip:$port: $^E";
        my $now = time();
        $start = $now if $now < $start;
        my $sleep = $start + $listen_timeout - $now;
        die $n ? "Giving up. Could still" : "Could", " not bind to $ip:$port: $^E" if $sleep <= 0;
        $sleep = 0.06 + rand 0.04 if $sleep >= 0.1;
        printf("Could not bind to %s:%d. Some other instance is probably using it. Will try to acquire socket for %.1f more seconds\n",
               $ip, $port, $listen_timeout) if !$n++ && $verbose >= 2;
        sleep $sleep;
    }
    printf("Acquired listening socket after %.1f seconds\n", time() - $start) if
        $n && $verbose >= 2;
    # my $IP_TRANSPARENT = 19;
    # setsockopt($recv, IPPROTO_IP, $IP_TRANSPARENT, 1) ||
    #     die "Could not setsockopt IP_TRANSPARENT: $^E";
    $recv->blocking(0);

    my $options1;
    if ($inform) {
        $options1 = {
            your_ip	=> $request_ip || "0.0.0.0",
        };
        $keep //= 1;
    } else {
        for my $try (0..$retries) {
            # DISCOVER
            $mac = packet_send(
                DISCOVER,
                $fou, $interface, $send_from, $server_packed, $ttl, $xid,
                $gateway_ip, $mac, $broadcast, $unicast,
                defined $hostname ? (hostname => $hostname) : (),
                $request_ip ? (request_ip => $request_ip) : (),
                %agent_info ? (agent_info => \%agent_info) : (),
            );

            # OFFER
            last if
                $options1 = packet_receive(
                    $recv, $timeout, $xid, \%expect_ip, \%expect_id, $mac);
            print "DHCPOFFER receive timed out\n" if $verbose >= 2;
        }
        if (!$options1) {
            print $nagios ? "CRITICAL - " : "", "Max DHCPDISCOVER retries reached\n";
            exit 2;
        }
        $options1->{message_type} == OFFER ||
            die "Unexpected reply type $options1->{message_type} (expected OFFER)";

        $xid = int(($xid+1) % 2**32);
    }

    my $options2;
    if ($request) {
        for my $try (0..$retries) {
            # REQUEST
            my $m = packet_send(
                $inform ? INFORM : REQUEST,
                $fou, $interface, $send_from,
                $track && !$inform ? $options1->{server_packed} : $server_packed,
                $ttl, $xid, $gateway_ip, $mac,
                $track ? 0 : $broadcast, $unicast,
                defined $hostname ? (hostname	=> $hostname) : (),
                request_ip => $options1->{your_ip},
                $inform ? () : (server => $options1->{server_addr}),
                %agent_info ? (agent_info => \%agent_info) : (),
            );

            $mac //= $m;
            # ACK
            last if
                $options2 = packet_receive(
                    $recv, $timeout, $xid, $options1->{expect_ip}, $options1->{expect_id}, $mac);
            print "DHCPACK receive timed out\n" if $verbose >= 2;
        }
        if (!$options2) {
            print $nagios ? "CRITICAL - " : "", "Max DHCPREQUEST retries reached\n";
            exit 2;
        }
        if ($options2->{message_type} != ACK) {
            my $message_type = message_type($options2->{message_type});
            my $result = "Unexpected reply type DHCP$message_type (expected DHCPACK)";
            $result.= ". Reason: " . string_from_value($options2->{message}) if
                $options2->{message} ne "";
            $result .= "\n";
            if ($nagios) {
                print "CRITICAL - $result";
                exit 2;
            }
            die $result;
        }
        print "$separator\n" if $verbose >= 2;
        $result = "DHCP Server $options2->{server_ip} gave out $options2->{your_ip} to MAC $options2->{hw}\n";
    } else {
        $options2 = $options1;
        $result = "DHCP Server $options2->{server_ip} offered $options2->{your_ip} to MAC $options2->{hw}\n";
    }
    print $result if !$nagios || $verbose >= 2;

    if (!$keep) {
        # RELEASE
        $options2->{your_ip} ne "0.0.0.0" || die "No IP address was assigned";
        packet_send(RELEASE,
                    $fou, $interface, $send_from,
                    $track ? $options2->{server_packed} : $server_packed,
                    $ttl, $xid, $gateway_ip, $mac,
                    $track ? 0 : $broadcast, $unicast,
                    defined $hostname ? (hostname	=> $hostname) : (),
                    request_ip	=> $options2->{your_ip},
                    server	=> $options2->{server_addr},
                    message	=> "$Script is done testing",
                    %agent_info ? (agent_info => \%agent_info) : (),
                );
    }
};
if ($@) {
    die $@ if !$nagios;
    print "UNKNOWN - $@";
    exit 3;
}
print "OK - $result" if $nagios;

__END__

=head1 NAME

dhcp_test - Do a test DHCP exchange

=head1 SYNOPSIS

 dhcp_test [-v|--verbose] [-N|--nagios] [-R|--request] [-k|--keep] [--inform]
           [-m|-mac [<string>]] [--xid <INT>][-H|--hostname [<string>]]
           [-I|--ip <ADDRESS>] {-e|--expect_ip <ADDRESS>} {-E|--expect_id <IP>}
           [--fou <ADDRESS>] [-f|--from <ADDRESS>] [-s|--server <ADDRESS>]
           [-i|--interface <string>] [-b|--broadcast] [-u|--unicast]
           [-l|--listen <ADDRESS>] [-g|--gateway [<IP>]] [--ttl <INT>]
           [-T|--track] [--circuit_id <STRING>] [--remote_id <STRING>]
           [-L|listen_timeout <FLOAT>] [-t|--timeout <FLOAT>] [-r|--retries <INT>]
 dhcp_test [--version] [-U | --unsafe] [-h | --help]

=head1 DESCRIPTION

B<dhcp_test> does a complete exchange with a DHCP server.
Send DHCPDISCOVER, receive DHCPOFFER, send DHCPREQUEST, receive DHCPACK and
send DHCPRELEASE.

=head1 OPTIONS

Valid options are:

=over 4

=item X<verbose>-v, --verbose

Print details about the DHCP exchange. Can be given more than once to increase
verbosity.

=item X<nagios>-N, --nagios

Behave like a Nagios monitoring plugin.

=item X<request>-R, --request

Do a DHCPREQUEST after DHCPDISCOVER/DHCPOFFER. This flag is on by default, so
the expected use is C<--no-request> which will cause the program to not do
the DHCPREQUEST/DHCPACK step. Even then it will still do the DHCPRELEASE unless
the L<--keep|/keep> option is given.

=item X<keep>-k, --keep

Do not release the IP address at the end of the exchange
(don't send the DHCPRELEASE).

=item X<inform>--inform

Don't do a DISCOVER/OFFER/REQUEST/ACK/RELEASE sequence, but just do
INFORM/ACK instead.

This option is actually not that useful in general because the answer tends to
go directly to the IP address the DHCP server selects which quite often isn't
the IP address the program is running on, so the program will not see it and
time out. The L<--gateway|/gateway> option may work but the DHCP server will
typically ignore the MAC addres you want to match.

So it is mostly just usable to query information about the local host. For
example like this:

  dhcp_test --inform -v

=item X<hostname>-H, --hostname I<STRING>

Propose this hostname to the DHCP server. If this option is given but the I<STRING> value is absent or empty it will use the name of the host the program runs
 on.

=item X<ip>-I, --ip <ADDRESS>

Suggest this preferred IP address to the DHCP server. The DHCP server is free to
ignore this and offer some other IP address.

=item X<mac>-m, --mac I<STRING>

The MAC address what will be sent with the DHCPDISCOVER request. If this option
is not given the MAC address of the sending interface will be used.

The program currently only supports ethernet.

The I<STRING> is a case insensitive hexadecimal string and may use colons,
periods or spaces as separators. Separated groups are left padded with a C<0>
if their length is odd. So

   --mac "1 Ab::6. 3dE 12"

will be interpreted the same as C<01AB0603XE12> or C<01:AB:06:03:XE:12>

As seen in this example you can also set digits in I<STRING> to the placeholder
C<X>. These nibbles will be replaced by somewhat random values. This allows you
to generate probably unique MACs. For example

   --mac BA:D1:XX:XX:XX:XX

might generate a MAC address like C<BA:D1:28:F8:6C:1B> which should hopefully be
unique among recent C<dhcp_test> requests and should not be in use by any real
device because MAC addresses with the second least significant bit of the most
significant octet set are locally administered for unicast:

  x2:xx:xx:xx:xx:xx
  x6:xx:xx:xx:xx:xx
  xA:xx:xx:xx:xx:xx
  xE:xx:xx:xx:xx:xx

Something else on your net may also use locally administered MAC addresses
(e.g. some embedded devices), so make sure to pick a prefix that doesn't clash.

Also take care when combining MAC placeholders with the L<--keep|/keep> option
because you may exhaust the DHCP server IP addresses pool.

=item X<xid>--xid I<INT>

Use I<INT> as transaction identifier. Can also be given as an I<IP> which is
then converted to number. If not given an appropiate value is generated
internally.

Transaction IDss are used to match DHCP responses with DHCP requests
(among other things. the program also checks for a MAC address match).

This value will be used for the DHCPDISCOVER request. After selecting a
DHCPOFFER response the value is increased by I<1> (wrapped) and the result is
used for DHCPREQUEST and DHCPRELEASE.

=item X<expect_ip>-e, --expect_ip I<ADDRESS>

When DHCPDISCOVER requests are broadcast multiple DHCP servers can answer.
By default the first DHCPOFFER received will be selected to go ahead with.
If this option is given only a DHCPOFFER from the DHCP server sending from the
given I<ADDRESS> will be selected

This option can be given multiple times in which case the reply packet is
accepted if it matches any of the I<ADDRESS> values.

The sender of the selected DHCPOFFER will always be used for DHCP response
selection in the following steps, any values of this option are ignored.

I<ADDRESS> can be given as I<HOST:PORT> or as just I<HOST> in which case it uses
the standard DHCP port (port 67). So by default the source port of incoming
packets is also checked. This option can be given multiple times in which case
the incoming packet must match at least one of the given addresses. If this
option is not given any source address will do but the packet is still checked
for coming from port 67.

Don't confuse this option with the L<--exoect_id|/expect_id> option. This
option is about the source IP of the reply packet, not about the packet content.

=item X<expect_id>-E, --expect_id I<IP>

The DHCPOFFER reply packet can contain DHCP option 54, DHCP Server identifier.
The value of this DHCP option must match one of the I<IP>s passed using this
program option If the DHCPOFFER reply packet does not contain this mandatory
option the program dies with an error.

The program option can be given multiple times. In that case the
DHCP Server identifier must match any one of them.

If this program option is not given the packet source IP is used instead.

The DHCP Server identifier of the selected DHCPOFFER will always be used for
DHCP response selection in the following steps, any values of this program
option are ignored.

Don't confuse this program option with the L<--exoect_ip|/expect_ip> option.
This option is about somethjing in the packet content, not about the packet
source IP.

=item X<from>-f, --from I<ADDRESS>

Send the DHCP requests from the given I<ADDRESS>. If this option is not given
the program will select something appropiate by itself.

I<ADDRESS> can be given as I<HOST:PORT> or as just I<HOST> in which case it
selects an appropiate port by itself.

=item X<server>-s, --server I<ADDRESS>

Send DHCP requests to the given I<ADDRESS>. If this option is not given it will
use the broadcast address I<255.255.255.255:67>.

I<ADDRESS> can be given as I<HOST:PORT> or as just I<HOST> in which case it uses
the standard DHCP port (port 67).

Notice that the L<--expect_ip|/expect_ip> option may still be needed since since
the answers don't always come from this server I<ADDRESS>, e.g, with a
multihomed DHCP server.
And there is always a chance that some other DHCP server sends a response which
just happens to match all relevant properties (mostly MAC address and
transaction ID). This is less theoretical than it may seem because some DHCP
servers snoop network traffic and respond to requests even if the request is
specifically not addressed to them.

Note about the ISC DHCP server (and possibly other DHCP servers).

The ISC DHCP server listens on RAW IP sockets bound to the configured ethernet
interfaces and filters for IP packets with destination port 67. It also binds
to a normal UDP socket on port 67 which is meant for outgoing packets. Any
packets that arrive on this interface will be discarded. This means that if you
use the L<--server|/server> option to point to the DHCP server on the host
itself this won't work. The packet goes over the loopback and won't match the
RAW packet filter. Instead the packet will arrive on the normal UDP socket and
get discarded. What B<DOES> work is sending to any address that will route over
an interface the DHCP server listens on. Use this in combination with the
L<--ttl|/ttl> option to avoid traffic to the destination address actually
arriving (you cannot however avoid the first hop)

=item X<interface>-i, --interface I<string>

Bind the sending socket to the named interface (e.g. I<eth0>). This can be
important if you need the packets to be sent over a specific interface.
If this option is not given the operating system will typically send requests
over the interface that the routing table will select for the
L<server|/server> value.

=item X<track>-T, --track

This options modifies the meaning L<--server|/server> value.

The DHCPDISCOVER will still be send to the given L<--server|/server> address,
but all subsequent requests will be directly sent to the DHCP server that sent
the selected DHCPOFFER response.

=item X<broadcast>-b, --broadcast

This option defaults to true if no L<--server|/server> option is givem.
Otherwise it defaults to false.

If this option is true the broadcast flag is applied to the socket sending the
DHCPDISCOVER request. This is needed on most operating systems to be allowed
to send a broadcast packet, but this will usually need special permissions
(like being C<root> on unix).

The flag is also used for subsequent requests except if the L<--track|/track>
option is given. In that last case the packets are directly sent to the DHCP
server whose DHCPOFFER was selected, so no broadcast flag is needed.

This option controls request packets. So don't confuse this with the
L<--unicast|/unicast> option which controls response packets.

PS: Sending to I<255.255.255.255> doesn't need this flag.

=item X<unicast>-u, --unicast

By default a flag is set in each DHCP request which requests that the response
gets sent as a broadcast.

If this option is given that flag is not set and as a result the response will
be sent directly to the IP address that gets assigned by the DHCP server. Unless
this is an IP address of the host on which this program is running the program
will not see the response and the DHCP exchange will fail. So only use this
option if you have some cunning plan.

The option will be ignored if the program acts as a DHCP relay (using the
L<--gateway|/gateway> option)

This option (indirectly) controls response packets. So don't confuse this with
the L<--broadcast|/broadcast> option which controls request packets.

=item X<gateway>-g, --gateway I<IP>

The program will behave like a DHCP relay. All requests will use the given I<IP>
as the gateway address. The I<IP> argument is optional. If this option is given
without argument or with an empty argument it will use a local IP address
instead (the IP address that would be used as source for packets to
L<sender|/sender>).

If this option is used the DHCP server will send its responses back to I<IP>.
So if this is not a local IP the program will normally not see the DHCP response
so only do that if you have a cunning plan (see the EXAMPLE section for these)

Notice that this option is the way you tell a DHCP server to select an address
from a different subnet than the one with the DHCP server address.

Also notice that this option by default will try to listen on port C<67>
which means you typically can't use this on a host that runs a DHCP server or
DHCP relay. That is unless the L<--listen|/listen> option is given which allows
you to wait for responses from another port combined with a cunning plan to
make sure responses get to this port (again see the EXAMPLE section)

=item X<ttl>--ttl I<INT>

Sends the request packets with the given Time to live (hop limit). This is
a way in which you can avoid a packet from traveling too far. This will
typically only make sense if you are not doing a broadcast.

=item X<circuit_id>--circuit_id I<STRING>

Pass the given string as the Circuit ID Sub-option in a Relay Agent Information
Option. The Sub-option is not sent if this option is not given. Normally only
used in combination with the L<gateway|/gateway> option.

=item X<remote_id>--remote_id I<STRING>

Pass the given string as the Remote ID Sub-option in a Relay Agent Information
Option. The Sub-option is not sent if this option is not given. Normally only
used in combination with the L<gateway|/gateway> option.

=item X<fou>--fou I<ADDRESS>

Send packet using FOU encapsulation (Foo over UDP).

I<ADDRESS> can be given as I<HOST:PORT> or as just a port (number or name) in
which case the host defaults to C<127.0.0.1>.

If this option is given the outgoing packet is encapsulated and then sent to
I<ADDRESS> which is responsible for decapsulating it.

This option allows the program to send packets that it otherwise cannot
(because the user lacks permission to construct such packets).

In general avoid this option. It will need IP forwarding, it won't work if the
source address is a local IP address amd most (all ?) DHCP servers don't care
about the source port of the packet so it isn't needed.

=item X<listen>-l, --listen I<ADDRESS>

Listen for responses on I<ADDRESS>.

If this option is not given, it defaults to I<68> unless the
L<gateway|/gateway> option is given in which case it will default to I<67>.
On most operating systems these low port numbers will usually need special
permissions (like being C<root> on unix).

I<ADDRESS> can be given as just a port (number or name) in which case the
program will listen on all addresses or in the form of I<HOST:PORT> in which
case it will listen on that specific I<IP> and I<PORT> combination.

Since you have no control over to which port the DHCP server will send its
responses using this option with a different port will normally mean the program
won't see the response so only use this option if you have a cunning plan.

Packets received on this interface are first checked for FOU encapsulation
(irrespective of the use of the L<--fou|/fou> option). If they are encapsulated
the packet is first decapsulated before further processing.

=item X<listen_timeout>-L, --listen_timeout I<FLOAT>

The program opens a socket to listen for server replies. If another instance
of this program is running it will probably use the same port and the bind will
fail. This timeout sets for how many second the program will try to acquire a
listening socket before giving up. Defaults to I<5>.

=item X<timeout>-r, --timeout I<FLOAT>

After sending a DHCP request the program will wait for I<FLOAT> seconds for
a resonse. Defaults to I<1.5>.

=item X<retries>-r, --retries I<INT>

If the DHCP response times out the program will retry I<INT> more times.
Defaults to I<2> (giving a total of 3 attempts)

=item X<help>-h, --help

Show this help.

=item X<unsafe>-U, --unsafe

Allow even root to run the perldoc.
Remember, the reason this is off by default is because it B<IS> unsafe.

=item X<version>--version

Print version info.

=back

All I<IP> values can also be given as names that will then be resolved.

=head1 EXAMPLE

Simplest use: Do a broadcast, get an IP address assigned and release it

   dhcp_test

The same but with more details about the steps:

   dhcp_test -v

Do the same thing but don't release the assigned IP address at the end:

   dhcp_test -k

The same but function as a DHCP relay:

   dhcp_test -g

Do the DHCP exchange only with a specific DHCP server without broadcast:

   dhcp_test -s IP

Do normal DHCP broadcasts, but only accept offers from a specific DHCP server:

   dhcp_test -e IP

A very complex example:

Send a request on interface C<eth0> (-i) to C<0.0.0.1> (-s) for a host with
randomly generated MAC address C<BA:D1:XX:XX:XX:XX> (-m) and proposed hostname
C<pluto> (-H) as a DHCP relay that expects an answer to 10.254.0.14 (-g). Only
accept answers from C<10.253.0.8> (-e). Once the DHCP server gives us an IP
address we hold one to it (-k). Send using FOU over port 1237 and listen for
(FOU) answers on port C<1236> (-l)

   dhcp_test -s 0.0.0.1 -e 10.253.0.8 -m BA:D1:XX:XX:XX:XX -H pluto -k -g 10.254.0.14 -i eth0 -l 1236 --fou 1237

We assume here we are running on C<10.253.0.8> which is also the host with a
DHCP server (which snoops the otherwise meaningless packets to C<0.0.0.1>). So
we won't see the answer to C<10.254.0.14> and would normally time out. On linux
we can set up a FOU tunnel that catches the response:

   # Set up FOU tunnel. Notice that we listen on the output port of the tunnel
   modprobe fou
   ip link add name fou1 type ipip remote 127.0.0.1 local 127.0.0.1 ttl 225 encap fou encap-sport auto encap-dport 1236
   # ip addr add 10.253.4.1/24 dev fou1
   ip link set fou1 up
   # Decapsulator
   # Remove the "local 127.0.0.1" on older versions of linux
   ip fou add port 1237 ipproto 4 local 127.0.0.1

   # Allow these weird outgoing FOU packets
   sysctl -w net.ipv4.conf.all.rp_filter=0
   sysctl -w net.ipv4.conf.fou1.rp_filter=0

   # Match DHCP replies about MAC address BA:D1:XX:XX:XX:XX and mark them
   # Leave operational DHCP replies alone
   iptables -t mangle -A OUTPUT -p udp --sport 67 --dport 67 -m u32 --u32 "4&0x1FFF=0 && 0>>22&0x3C@34&0xffff=0xbad1 && 0>>22&0x3C@5&0xff=0x02" -j MARK --set-mark 17

   # Make marked packets use routing plane 101
   ip rule add fwmark 17 lookup 101

   # Route everything in routing plane 101 into the FOU tunnel:
   ip route add default dev fou1 table 101

=head1 BUGS

Only supports IPV4

=head1 SEE ALSO

L<dhcpd(8)>,

=head1 AUTHOR

Ton Hospel, E<lt>DHCP-Test@ton.iguana.beE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2021 by Ton Hospel

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.1 or,
at your option, any later version of Perl 5 you may have available.

=cut
